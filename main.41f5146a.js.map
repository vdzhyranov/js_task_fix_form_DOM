{"version":3,"sources":["scripts/main.js"],"names":["inputs","document","querySelectorAll","input","label","id","corectWordStyle","name","placeholder","insertAdjacentHTML","word","result","i","length","toUpperCase","toLowerCase","slice"],"mappings":";AAAA,aA6BC,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EA3BD,IA2BC,EA3BKA,EAAaC,EAAAA,SAASC,iBAAiB,UAEzBF,EAAAA,EAAAA,GAyBnB,IAzB2B,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAjBG,IAAAA,EAAiB,EAAA,MACpBC,EAGID,sDAAAA,OAAAA,EAAME,GAEZC,iBAAAA,OAAAA,EAAgBH,EAAMI,MAL1B,sBASAJ,EAAMK,YAAcF,EAAgBH,EAAMI,MAC1CJ,EAAMM,mBAAmB,cAAeL,IAczC,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAXD,SAASE,EAAgBI,GAGlB,IAFDC,IAAAA,EAASD,EAEJE,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC3BF,EAAKE,KAAOF,EAAKE,GAAGE,gBACtBJ,EAAKE,GAAGG,cACRJ,EAAYD,GAAAA,OAAAA,EAAKM,MAAM,EAAGJ,GAAMF,KAAAA,OAAAA,EAAKM,MAAMJ,GAAGG,gBAI3CJ,OAAAA,EAAO,GAAGG,cAAgBH,EAAOK,MAAM","file":"main.41f5146a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst inputs = [...document.querySelectorAll('input')];\n\nfor (const input of inputs) {\n  const label = `\n    <label\n      class=\"field-label\"\n      for=${input.id}\n    >\n    ${corectWordStyle(input.name)}\n    </label>\n  `;\n\n  input.placeholder = corectWordStyle(input.name);\n  input.insertAdjacentHTML('beforebegin', label);\n};\n\nfunction corectWordStyle(word) {\n  let result = word;\n\n  for (let i = 1; i < word.length; i++) {\n    if (word[i] === word[i].toUpperCase()) {\n      word[i].toLowerCase();\n      result = `${word.slice(0, i)} ${word.slice(i).toLowerCase()}`;\n    }\n  }\n\n  return result[0].toUpperCase() + result.slice(1);\n};\n"]}